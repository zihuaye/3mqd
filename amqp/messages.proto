syntax = "proto2";

package amqp;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/jeffjenkins/dispatchd/amqp/protocol_generated.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;

message WireFrame {
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.goproto_getters) = false;
  optional uint32 frameType = 1 [(gogoproto.nullable) = false, (gogoproto.casttype) = "uint8"];
  optional uint32 channel   = 2 [(gogoproto.nullable) = false, (gogoproto.casttype) = "uint16"];
  optional bytes  payload   = 3 ;
}

message IndexMessage {
  // The ID of the underlying message
  optional int64    id              = 1 [(gogoproto.nullable) = false];
  // The number of outstanding references to the message
  optional int32    refs            = 2 [(gogoproto.nullable) = false];
  optional bool     durable         = 3 [(gogoproto.nullable) = false];
  optional int32    deliveryCount   = 4 [(gogoproto.nullable) = false];
  optional bool     persisted       = 5 [(gogoproto.nullable) = false];
}

message Message {
  optional int64                      id          = 1 [(gogoproto.nullable) = false];
  optional amqp.ContentHeaderFrame    header      = 2;
  repeated WireFrame                  payload     = 3;
  optional string                     exchange    = 4 [(gogoproto.nullable) = false];
  optional string                     key         = 5 [(gogoproto.nullable) = false];
  optional amqp.BasicPublish          method      = 6;
  optional uint32                     redelivered = 7 [(gogoproto.nullable) = false];
  optional int64                      local_id    = 8 [(gogoproto.nullable) = false];
}

message QueueMessage {
  optional int64  id            = 1 [(gogoproto.nullable) = false];
  optional int32  deliveryCount = 2 [(gogoproto.nullable) = false];
  optional bool   durable       = 3 [(gogoproto.nullable) = false];
  optional uint32 msgSize       = 4 [(gogoproto.nullable) = false];
  optional int64  localId       = 5 [(gogoproto.nullable) = false];
}

message ContentHeaderFrame {
  optional uint32  content_class      = 1 [(gogoproto.casttype) = "uint16", (gogoproto.nullable) = false];
  optional uint32  content_weight     = 2 [(gogoproto.casttype) = "uint16", (gogoproto.nullable) = false];
  optional uint64  content_body_size  = 3 [(gogoproto.nullable) = false];
  optional uint32  property_flags     = 4 [(gogoproto.casttype) = "uint16", (gogoproto.nullable) = false];
  optional amqp.BasicContentHeaderProperties properties = 5;
}

message TxMessage {
  optional Message  msg = 1;
  optional string   queue_name = 2 [(gogoproto.nullable) = false];
}

message TxAck {
  optional uint64 tag            = 1 [(gogoproto.nullable) = false];
  optional bool   multiple         = 2 [(gogoproto.nullable) = false];
  optional bool   nack             = 3 [(gogoproto.nullable) = false];
  optional bool   requeue_nack     = 4 [(gogoproto.nullable) = false];
}

message UnackedMessage {
  optional string       consumer_tag  = 1 [(gogoproto.nullable) = false];
  optional QueueMessage msg      = 2;
  optional string       queue_name    = 3 [(gogoproto.nullable) = false];
}
